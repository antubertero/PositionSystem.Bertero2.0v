openapi: 3.0.3
info:
  title: Sistema General de Control de Personal
  version: 1.0.0
  description: API REST para gestionar personas, eventos y monitoreo en tiempo real.
servers:
  - url: http://localhost:8080
paths:
  /auth/login:
    post:
      summary: Iniciar sesión
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required: [username, password]
      responses:
        '200':
          description: Token emitido
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Credenciales inválidas
  /people:
    get:
      summary: Listar personas
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: unit
          schema:
            type: string
        - in: query
          name: role
          schema:
            type: string
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/StatusEnum'
      responses:
        '200':
          description: Listado de personas
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Person'
    post:
      summary: Crear persona
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonInput'
      responses:
        '201':
          description: Persona creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
  /events/presence:
    post:
      summary: Registrar evento de presencia
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresenceEvent'
            examples:
              biometricEntry:
                summary: Entrada biométrica
                value:
                  person_id: bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb
                  ts: 2024-05-20T12:00:00Z
                  source: biometric
                  type: entry
      responses:
        '201':
          description: Evento procesado
          content:
            application/json:
              schema:
                type: object
                properties:
                  event:
                    $ref: '#/components/schemas/PresenceEvent'
                  snapshot:
                    $ref: '#/components/schemas/StatusSnapshot'
  /status/now:
    get:
      summary: Estado actual
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: unit
          schema:
            type: string
      responses:
        '200':
          description: Estado actual por persona
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StatusNowItem'
  /status/history:
    get:
      summary: Historial por persona
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: person_id
          required: true
          schema:
            type: string
        - in: query
          name: from
          schema:
            type: string
            format: date-time
        - in: query
          name: to
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Historial de estados
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StatusSnapshot'
  /alerts/test:
    post:
      summary: Enviar alerta de prueba
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                person_id:
                  type: string
                channel:
                  type: string
              required: [person_id]
      responses:
        '200':
          description: Alerta enviada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /reports/kpi:
    get:
      summary: Indicadores clave
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date-time
        - in: query
          name: to
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Totales por estado
          content:
            application/json:
              schema:
                type: object
                properties:
                  totals:
                    type: object
                    additionalProperties:
                      type: integer
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Person:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nombre:
          type: string
        rol:
          type: string
        jerarquia:
          type: string
          nullable: true
        especialidad:
          type: string
          nullable: true
        unidad:
          type: string
          nullable: true
    PersonInput:
      type: object
      properties:
        nombre:
          type: string
        rol:
          type: string
        jerarquia:
          type: string
        especialidad:
          type: string
        unidad:
          type: string
      required: [nombre, rol]
    PresenceEvent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        person_id:
          type: string
        ts:
          type: string
          format: date-time
        source:
          type: string
          enum: [mobile, kiosk, biometric, task, calendar, panic]
        type:
          type: string
          enum: [entry, exit, checkin, checkout, assigned, completed, panic, geo_enter, geo_exit]
        payload:
          type: object
          additionalProperties: true
      required: [person_id, ts, source, type]
    StatusSnapshot:
      type: object
      properties:
        person_id:
          type: string
        status:
          $ref: '#/components/schemas/StatusEnum'
        ts:
          type: string
          format: date-time
        source:
          type: string
        reason:
          type: string
    StatusNowItem:
      allOf:
        - $ref: '#/components/schemas/Person'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/StatusEnum'
            ts:
              type: string
              format: date-time
            reason:
              type: string
    StatusEnum:
      type: string
      enum: [OFF_SHIFT, ON_SHIFT, AVAILABLE, BUSY, BREAK, ABSENT, TRAINING, ESCALATED, EMERGENCY]
